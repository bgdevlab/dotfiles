#!/usr/bin/env bash
#
# - Valet is used to switch PHP versions
#

export PHP_EXTENSIONS="${PHP_EXTENSIONS:-shivammathur/extensions/redis shivammathur/extensions/apcu shivammathur/extensions/memcached shivammathur/extensions/mongodb shivammathur/extensions/imagick shivammathur/extensions/xdebug shivammathur/extensions/imap shivammathur/extensions/msgpack shivammathur/extensions/igbinary}" # from shivammathur/extensions/imagick
export PHP_VERSIONS="${PHP_VERSIONS:-7.0 7.1 7.2 7.3 7.4 8.0 8.1}" # from shivammathur/extensions/imagick


export COMPOSER_PROCESS_TIMEOUT="${COMPOSER_PROCESS_TIMEOUT:-900}" # default is COMPOSER_PROCESS_TIMEOUT=300
export COMPOSER_MEMORY_LIMIT="${COMPOSER_MEMORY_LIMIT:-2G}"
export COMPOSER_HOME="$HOME/.composer"

if test composer -v &>/dev/null; then

    # add composer to path if possible
    
    export COMPOSER_HOME="$(composer global config -q --absolute home)"

    if test -e "$(composer global config -q --absolute vendor-dir)/bin"; then 
        #
        # ensure composer/bin comes later in search path
        #
        folder="$(composer global config -q --absolute vendor-dir)/bin"
        echo $PATH | grep "$folder" &>/dev/null && true || export PATH="$PATH:$folder" # add path later in seach path if missing 
    fi

fi


function php_show_modules() {

    # show loaded modules 
    
    local modules="$(echo $PHP_EXTENSIONS|sed 's#shivammathur/extensions/##g'| tr ' ' '|')"
    echo "php-fpm modules : $(php-fpm -m | grep -iE "$modules" | tr A-Z a-z | sort | uniq | xargs)"
    echo "php modules     : $(php -m | grep -iE "$modules" | tr A-Z a-z | sort | uniq | xargs)"
}


function composer_global_clean() {

    echo "${FUNCNAME[0]} $@"

    if test ! -z "$COMPOSER_HOME" && test -d "$COMPOSER_HOME"; then   
        /bin/rm -f "${COMPOSER_HOME}"/composer.{json,lock} || true
    else
        echo "problem with composer"
        return 1
    fi

    composer global dump &>/dev/null || true # dump autoloader to generate 'platform_check.php'
}


function composer_global_install() {

    echo "${FUNCNAME[0]} $@"

    [[ $# -ne 1 ]] && {
        echo "Usage: ${FUNCNAME} php_version - required use n.n style"
        return 1
    }
    local phpversion=$1 # n.n format

    composer_global_clean

    # 
    echo "composer global require for php@$phpversion"
    case "$phpversion" in
        5.6 )
            echo "not supported" && return 1
            ;;
        8.0 )
            composer global require --quiet --with-all-dependencies --no-interaction \
                "tightenco/tlint" \
                "friendsofphp/php-cs-fixer"  \
                "laravel/installer" \
                "laravel/valet:^2.17" \
                "laravel/envoy" \
                "slince/composer-registry-manager" \
                "jorijn/laravel-security-checker" \
                "tightenco/takeout"
            ;;
        8.1 )
            composer global require --quiet --with-all-dependencies --no-interaction \
                "tightenco/tlint" \
                "friendsofphp/php-cs-fixer"  \
                "laravel/installer" \
                "laravel/valet:^2.17" \
                "laravel/envoy" \
                "slince/composer-registry-manager" \
                "jorijn/laravel-security-checker" \
                "tightenco/takeout"
            ;;
        * ) 
            composer global require --quiet --with-all-dependencies --no-interaction \
                "friendsofphp/php-cs-fixer"  \
                "laravel/installer" \
                "laravel/valet:^2.17" \
                "laravel/envoy" \
                "slince/composer-registry-manager" \
                "jorijn/laravel-security-checker" 
            ;;            
    esac
    
    # composer global show -D 2>/dev/null | awk '{print $1":"$2}'
}


function valet_uninstall() {

    echo "${FUNCNAME[0]}"

    echo "🤞 Uninstall valet"
    type -p valet &>/dev/null && valet uninstall --force --no-interaction &>/dev/null || true

    composer global remove --no-interaction laravel/valet &>/dev/null || echo ' Valet not installed via composer global'

    echo "🤞 Uninstall brew services"
    for formula in dnsmasq nginx; do
        sudo brew services stop $formula &>/dev/null || true
        sudo brew uninstall --force --ignore-dependencies "$formula" &>/dev/null || sudo rm -rf /usr/local/Cellar/$formula || true
        brew uninstall --force --ignore-dependencies "$formula" &>/dev/null || sudo rm -rf /usr/local/Cellar/$formula || true
    done

    echo "🤞 Force tidyup of empty brew formula directories"
    find /usr/local/Cellar -type d -empty -maxdepth 1 -exec rm -rf {} \; || true

    [ -d ~/.valet ] && sudo rm -r ~/.valet &>/dev/null || true
    [ -d ~/.config/valet ] && sudo rm -r ~/.config/valet &>/dev/null || true

    echo "🤞 Force tidyup of php / pecl / pear directories"
    sudo rm -rf /usr/local/etc/php/* /private/tmp/pear/* /usr/local/lib/php/* /usr/local/share/php* /usr/local/share/pear* &>/dev/null || true
    sudo rm -rf /private/tmp/pear/ &>/dev/null || true

    brew cleanup -q &>/dev/null || true
}


function switch_php() {
    
    if test -r $HOME/.dotfile_lastrun; then
        # likely php/valet need resetting - force this by removing valet
        valet=$(brew --prefix)/bin/valet || { echo 'brew has issues'; return 1; }
        /bin/rm -f $valet $HOME/.dotfile_lastrun
    fi
    
    echo "${FUNCNAME[0]}"

    #
    # https://laracasts.com/discuss/channels/general-discussion/issues-with-laravel-valet-when-installing-old-php-version
    # https://freek.dev/1185-easily-switch-php-versions-in-laravel-valet
    #

    [[ $# -ne 1 ]] && {
        echo "function ${FUNCNAME} php_version - required use n.n style"
        return 1
    }
    
    if ! type -p composer &>/dev/null; then
        echo "🤔 Cannot find composer - cannot progress!"
        return 1 # composer is not installed
    fi 

    local php_version_current=$(php -r "echo PHP_VERSION;" | cut -d. -f-2)
    local php_version_target=$1 # n.n format

    # =========================================================================
    #
    #   Ensure existing installation is ready
    #

    echo "⚡️ Prepare existing php/valet"

    # We need valet to continue
    valet=$(brew --prefix)/bin/valet

    if ! test -e ${valet}; then 
        echo "🤔 Missing php/valet - restoring via composer"
        composer_global_install ${php_version_current} 

        if ! test -e ${valet}; then 
            echo "🤔 Still cannot find valet - run .composer/vendor/bin/valet install"
            $COMPOSER_HOME/vendor/bin/valet install
        fi

        if ! test -e ${valet} && ! ${valet} -v &>/dev/null; then 
            echo "🤔 Looks like we broke it - still can't find valet at ${valet}!"
            return 1
        else
            echo "⚡️ Valet restored at $valet"
        fi
    fi

    # permissions for interupt free switching 
    echo "⚡️ Trust in Valet !"
    sudo -v && $valet trust
    
    #echo "⚡️ Switching php versions using Valet - php:${php_version_current}"
    # possibly skip this - or call it if valet trust fails ( essentially we need a check that valet is installed and ready to call 'valet use' )
    echo "$valet install || return 1"
    

    # =========================================================================
    #
    #   Switch PHP to the target version
    #

    echo "⚡️ Switch from php:${php_version_current}"
    
    $valet use php@${php_version_target} --force || return 1

    echo "⚡️ Switch to php:${php_version_target}"

    #
    # Php Extensions 
    #
    echo -e "⚡️ Add php extensions\n$(echo $PHP_EXTENSIONS| xargs -n 1 )\n"
    for ext in $PHP_EXTENSIONS; do 
        forumla="${ext}@${php_version_target}"
        HOMEBREW_NO_INSTALL_CLEANUP=true brew reinstall -q ${forumla} | grep -E '^=.*nstalling'
    done


    # =========================================================================
    #
    #   Global composer update to realign with new php version ( must always include Valet )
    #

    echo "⚡️ Composer Global update for ${php_version_target}"
    composer_global_install ${php_version_target}
    echo "✨ "
    composer global show -D --no-interaction 2>/dev/null | awk '{print $1":"$2}'

    #
    # Stop existing php-fpm services - ( might not need to ??? )
    #

    echo "⚡️ Brew Services - stop all php-fpm " 
    sudo brew services stop -q php # most recent version (doesnt specify a version)

    for phpver in $(echo $PHP_VERSIONS | xargs -n 1 | grep -v "${php_version_target}" ); # for all php versions except chosen version
    do 
        brewservice="php@$phpver"
        echo "✨ Stopping php-fpm : $phpver"    
        sudo brew services stop -q $brewservice || echo "🧨 failed to stop $brewservice"
    done

 
    echo "⚡️ Valet installing php ${php_version_target}"
    $valet install

    # read -p "Press enter to continue ( about to run Valet Restart )"
    echo "⚡️ Valet Restart ( to be sure, to be sure !! )"
    $valet restart

    sudo brew services list

}


function php_install() {
    #
    # php_install - run this once on new machine
    #
    echo "${FUNCNAME[0]}"

    sudo -v
    # Assumption is vis brew bundle .Brewfile we have tapped 'shivammathur/php' and 'shivammathur/extensions'
    if ! test php -v &>/dev/null; then
        #HOMEBREW_NO_INSTALL_CLEANUP=true brew reinstall --force -q shivammathur/php/php
        brew reinstall --force -q shivammathur/php/php
        brew install --ignore-dependencies composer
    fi
    brew cleanup -q

    target_php_version="${1:-8.1}"
    current_php_version=$(php -r "echo PHP_VERSION;" | cut -d. -f-2) 

    composer_global_install $current_php_version
    
    echo "✨ "    
    composer global show -D --no-interaction 2>/dev/null | awk '{print $1":"$2}'

    switch_php $target_php_version

}


function php_uninstall() {
    #
    # php_uninstall
    #
    echo "${FUNCNAME[0]}"
    sudo -v
    #
    # all php versions will be uninstalled when running valet uninstall --force
    # excessive indeed - but appears to be the only way.
    #
    valet_uninstall


    echo "🤞 Uninstall brew Formula + Php"

    phps="shivammathur/php/php $(for ver in $PHP_VERSIONS; do echo shivammathur/php/php@$ver; done;)"
    formulas="$(for ext in $PHP_EXTENSIONS; do  for ver in $PHP_VERSIONS; do echo $ext@$ver; done; done | xargs)"

    HOMEBREW_NO_INSTALL_CLEANUP=true brew uninstall --force composer php $phps $formulas composer 

  
    echo "🤞 Uninstall brew services"
    for formula in $(brew services list | grep '^php' | cut -d' ' -f1); do
        sudo brew services stop $formula &>/dev/null
        sudo brew services remove $formula &>/dev/null
        brew services stop $formula &>/dev/null
        brew services remove $formula &>/dev/null
    done


    echo "🤞 Tidy brew folders"    
    find /usr/local/Cellar -type d -empty -maxdepth 1 -exec rm -rf {} \; || true
    sudo /bin/rm -rf /usr/local/Cellar/php@* /usr/local/Cellar/php || true
    sudo /bin/rm -f $(brew --prefix)/bin/valet &>/dev/null || true
    brew cleanup -q &>/dev/null || true
    
    composer_global_clean

}